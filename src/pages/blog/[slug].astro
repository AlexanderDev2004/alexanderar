---
import { getCollection } from "astro:content";
import { FaArrowLeft } from "react-icons/fa";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const allPosts = await getCollection("content", (entry) => entry.data.type === "blog");
  return allPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { title, description, image, date, tags, stack } = post.data;

// Format tanggal untuk tampilan yang lebih baik
const formattedDate = new Date(date).toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
});
---

<Layout
  title={title}
  description={description}
  ogImage={image ?? undefined} <!-- Untuk SEO, asumsikan Layout mendukung ogImage -->
    ogTitle={title}
  <main class="container mx-auto px-4 py-12">
    <!-- Back Button -->
    <a href="/blog" class="text-blue-500 font-semibold flex items-center gap-2 hover:text-blue-300">
      <FaArrowLeft className="text-lg" />
      Back
    </a>

    <!-- Blog Header -->
    <h1 class="text-4xl font-bold text-blue-300 mt-6">{title}</h1>
    <p class="text-gray-400 mt-2">Description: {description}</p>
    <p class="text-gray-400 mt-2">Date: {formattedDate}</p>
    {tags && tags.length > 0 && (
      <p class="text-gray-400 mt-2">
        Tags: {tags.join(", ")}
      </p>
    )}
    {stack && stack.length > 0 && (
      <p class="text-gray-400 mt-2">
        Tech Stack:{" "}
        {stack.map((tech, index) => (
          <>
            <a
              href={tech.link}
              class="text-blue-400 hover:underline"
              target="_blank"
              rel="noopener noreferrer"
            >
              {tech.name}
            </a>
            {index < stack.length - 1 && ", "}
          </>
        ))}
      </p>
    )}

    {image && (
      <div class="mt-6 flex justify-start">
        <img
          src={image}
          alt={`Preview image for ${title}`}
          class="rounded-lg shadow-lg w-full max-w-3xl object-cover"
          loading="lazy"
        />
      </div>
    )}

    <!-- Render MDX Content with Error Boundary -->
    <article class="mt-8 prose prose-invert max-w-none">
      {(() => {
        try {
          return <post.Component />;
        } catch (error) {
          return <p class="text-red-500">Error rendering MDX content: {error.message}</p>;
        }
      })()}
    </article>
  </main>
</Layout>